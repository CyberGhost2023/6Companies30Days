/*
Time Complexity- O(N)
Space Complexity- O(K)

Question Link- https://practice.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1

Logic Used- Maintain a monotonic queue (Elements are sorted order).
*/

vector <int> max_of_subarrays(int *nums, int n, int k)
    {
       deque<int> dq;
        vector<int> ans;
        for (int i=0; i<n; i++) {
            if (!dq.empty() && dq.front() == i-k) dq.pop_front();
            while (!dq.empty() && nums[dq.back()] < nums[i])
                dq.pop_back();
            dq.push_back(i);
            if (i>=k-1) ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
