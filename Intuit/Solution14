/*
Time Complexity- O(n*m)
Space Complexity - O(n*m)

Question Link- https://leetcode.com/problems/as-far-from-land-as-possible/submissions/
*/
int maxDistance(vector<vector<int>>& grid) {
        queue<vector<int>> q;
        int n=grid.size(),m=grid[0].size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j])
                {
                    vector<int> vt{i,j};
                    q.push(vt);
                }
            }
        }
        if(q.empty() || q.size()==n*m)
            return -1;
        int cur=1;
        while(!q.empty())
        {
            vector<int> vt=q.front();
            int i=vt[0],j=vt[1];
            cur=max(cur,grid[i][j]);
            vector<int> vk(2);
            if(i+1<n && grid[i+1][j]==0)
            {
                grid[i+1][j]=grid[i][j]+1;
                vk[0]=i+1,vk[1]=j;
                q.push(vk);
            }
            if(i-1>=0 && grid[i-1][j]==0)
            {
                grid[i-1][j]=grid[i][j]+1;
                vk[0]=i-1,vk[1]=j;
                q.push(vk);
            }
            if(j+1<m  && grid[i][j+1]==0)
            {
                grid[i][j+1]=grid[i][j]+1;
                vk[0]=i,vk[1]=j+1;
                q.push(vk);
            }
            if(j-1>=0 && grid[i][j-1]==0)
            {
                grid[i][j-1]=grid[i][j]+1;
                vk[0]=i,vk[1]=j-1;
                q.push(vk);
            }
            q.pop();
        }
        return cur-1;        
    }
