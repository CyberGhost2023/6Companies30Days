/*
Time Complexity- O(NlogN)
Space Complexity- O(1)

Question Link- https://leetcode.com/problems/split-array-largest-sum/
*/

// Approach-1 (using binary search)

int calc(vector<int> &nums, int tot)
    {
        int n=nums.size(),ans=1,cur=0;
        for(int i=0;i<n;i++)
        {
            cur+=nums[i];
            if(cur>tot)
            {
                ans++;
                cur=nums[i];
            }
        }    
        return ans;
    }
    int splitArray(vector<int>& nums, int m) {
        int en=accumulate(nums.begin(),nums.end(),0);
        int st=*max_element(nums.begin(),nums.end());
        
        while(st<en)
        {
            int mid=(en-st)/2+st;
            if(calc(nums,mid)<=m) en=mid;
            else st=mid+1;
        }
        return en;
    }

// Approach-2 (using dynamic programming)

 int solve(vector<int> &nums,int m,int ind,vector<vector<int>> &dp)
    {
        int n=nums.size()-1;
        if(m==0)
        {
            return nums[n]-nums[ind-1]; 
        }
        if(dp[ind][m]!=-1)
            return dp[ind][m];
            
        int ans=INT_MAX;
        
        for(int i=ind;i<=n-m;i++)
        {
            int cur=max(nums[i]-nums[ind-1],solve(nums,m-1,i+1,dp));
            ans=min(ans,cur);
        }
         dp[ind][m]=ans;
        return ans;
    }
    int splitArray(vector<int>& nums, int m) {
        int n=nums.size();
        vector<int> vt(n+1,0);
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        for(int i=0;i<n;i++)
        {
            vt[i+1]=vt[i]+nums[i];
        }
        return solve(vt,m-1,1,dp);
    }
