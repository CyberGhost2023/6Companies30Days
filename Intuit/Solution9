/*
Time Complexity- O(n^2)
Space Complexity- O(n^2)

Question Link- https://leetcode.com/problems/pacific-atlantic-water-flow/
*/
void solve(queue<pair<int,int>> &q,vector<vector<int>>& ht,
        vector<vector<int>> &vis)
    {
        vector<vector<int>> vt{{0,1},{1,0},{-1,0},{0,-1}};
        int n=ht.size(),m=ht[0].size();
        while(!q.empty())
        {
            pair<int,int> p=q.front();
            int x=p.first,y=p.second;
            q.pop();
            for(int i=0;i<4;i++)
            {
                int xx=x+vt[i][0],yy=y+vt[i][1];
                if(xx<0 || xx>=n || yy<0 || yy>=m || ht[xx][yy]<ht[x][y] || vis[xx][yy])
                {
                    continue;
                }
                vis[xx][yy]=1;
                q.push({xx,yy});                
            }       
        }
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& ht) {
        queue<pair<int,int>> q1,q2;
        int n=ht.size(),m=ht[0].size();
        vector<vector<int>> dp1(n,vector<int>(m,0));
        vector<vector<int>> dp2(n,vector<int>(m,0)),ans;
        for(int i=0;i<m;i++)
        {
            dp1[0][i]=1;
            dp2[n-1][i]=1;
            q2.push({n-1,i});
            q1.push({0,i});
        }
        for(int i=0;i<n;i++)
        {
            dp1[i][0]=1;
            q1.push({i,0});
            dp2[i][m-1]=1;
            q2.push({i,m-1});
        }
        solve(q1,ht,dp1);
        solve(q2,ht,dp2);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(dp1[i][j] && dp2[i][j])
                {
                    ans.push_back({i,j});
                }
                    
            }
        }
        return ans;
    }
