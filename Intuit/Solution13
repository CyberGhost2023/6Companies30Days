 /*
 Time Complexity- O(n^2)
 Space Complexity- O(n)
 
 Question Link- https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid/ 
 */
 int minSwaps(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        vector<int> vt(n);
        for(int i=0;i<n;i++)
        {
            int cnt=0;
            for(int j=m-1;j>=0;j--)
            {
                if(grid[i][j])
                    break;
                cnt++;
            }
            vt[i]=cnt;
        }
        int sum=0;
        for(int i=0;i<n;i++)
        {
            int req=n-1-i;
            int k=i;
            while(k<n && vt[k]<req)k++;
            if(k==n)return -1;
            int tp=vt[k];
            
            while(k>i)
            {
                swap(vt[k],vt[k-1]);
                k--;
                sum++;
            }
            vt[k]=tp;
        }
        return sum;        
    }
