/*
Time Complexity- O(N!)
Space Complexity- O(N), considering recursion stack space.

Question Link- https://practice.geeksforgeeks.org/problems/largest-number-in-k-swaps-1587115620/1/
*/
class Solution
{
    public:
    string find(string st,int ind,int k)
    {
        if(k==0 || ind==st.size())
        return st;
        int mx=st[ind],ii=ind;
        for(int i=ind+1;i<st.size();i++)
        {
            if(mx<(int)st[i])
            {
                mx=st[i];
                ii=i;
            }
        }
        if(mx==st[ind])
        {
            return find(st,ind+1,k);
        }
        string ans=st;
        for(int i=ind+1;i<st.size();i++)
        {
            if((int)st[i]==mx)
            {
                swap(st[i],st[ind]);
                ans=max(ans,find(st,ind+1,k-1));
                swap(st[i],st[ind]);
            }
        }
        return ans;
    }
    //Function to find the largest number after k swaps.
    string findMaximumNum(string str, int k)
    {
          return find(str,0,k);
    }

};
